library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(metafor)
library(meta)
library(knitr)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(formatR)
source("utility_functions.R")
pfas_type = "PFNA"
if (pfas_type == "PFNA") {
betas <- read.csv("betas_pfna.csv")
} else if (pfas_type == "PFHxS") {
betas <- read.csv("betas_pfhxs.csv")
}
attach(betas)
names(betas)
table(betUnit)
table(BetaUnit)
log_df <- betas %>%
filter(BetaUnit %in% c("g/2SD ln(ng/ml)", "g/ln(ng/ml)", "g/log10(ng/ml)", "g/log2(ng/ml)", "g/SD ln(1+ng/ml)", "g/SD ln(ng/ml)"))
log_df
log_df
length(which(BetaUnit %in% c("g/2SD ln(ng/ml)", "g/ln(ng/ml)", "g/log10(ng/ml)", "g/log2(ng/ml)", "g/SD ln(1+ng/ml)", "g/SD ln(ng/ml)")))
nat_studies <- Study[!which(BetaUnit %in% c("g/2SD ln(ng/ml)", "g/ln(ng/ml)", "g/log10(ng/ml)", "g/log2(ng/ml)", "g/SD ln(1+ng/ml)", "g/SD ln(ng/ml)"))]
nat_studies
nat_studies <- Study[which(!(BetaUnit %in% c("g/2SD ln(ng/ml)", "g/ln(ng/ml)", "g/log10(ng/ml)", "g/log2(ng/ml)", "g/SD ln(1+ng/ml)", "g/SD ln(ng/ml)")))]
nat_studies
?rma
knitr::opts_chunk$set(echo = params$print_code,
warning = FALSE,
tidy = TRUE) #tidy.opts = list(width.cutoff = 60), # if word_document
#rmarkdown::render(output_file = paste0("Meta_Analysis_", pfas, ".pdf"))
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(metafor)
library(meta)
library(knitr)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(formatR)
source("utility_functions.R")
pfas_type = "PFNA"
if (pfas_type == "PFNA") {
betas <- read.csv("betas_pfna.csv")
} else if (pfas_type == "PFHxS") {
betas <- read.csv("betas_pfhxs.csv")
}
attach(betas)
rma_overall_fix
rma_overall_fix <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, method = "FE")
rma_overall_fix
summary(rma_overall_fix)
knitr::opts_chunk$set(echo = params$print_code,
warning = FALSE,
tidy = TRUE) #tidy.opts = list(width.cutoff = 60), # if word_document
#rmarkdown::render(output_file = paste0("Meta_Analysis_", pfas, ".pdf"))
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(metafor)
library(meta)
library(knitr)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(formatR)
source("utility_functions.R")
pfas_type = "PFNA"
if (pfas_type == "PFNA") {
betas <- read.csv("betas_pfna.csv")
} else if (pfas_type == "PFHxS") {
betas <- read.csv("betas_pfhxs.csv")
}
attach(betas)
study_nm <- loo$Study[ind]
study_confidence <- Confidence[Study == study_nm]
study_confidence2 <- Confidence2[Study == study_nm]
# Add an confidence variable with a high and medium confidence combined
betas <- betas %>%
mutate(Confidence2 = factor(ifelse(Confidence == "Low", "Low", "High+Medium"), levels = c("High+Medium", "Low")))
study_nm <- loo$Study[ind]
study_confidence <- Confidence[Study == study_nm]
study_confidence2 <- Confidence2[Study == study_nm]
names(betas)
attach(betas)
table(Confidence2)
study_nm <- loo$Study[ind]
study_confidence <- Confidence[Study == study_nm]
study_confidence2 <- Confidence2[Study == study_nm]
study_sampling <- Sampling_3[Study == study_nm]
rma_loo <- list(overall = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm)),
confidence = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm), subset = Confidence == study_confidence),
confidence2 = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm), subset = Confidence2 == study_confidence2),
sampling = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm), subset = Sampling_3 == study_sampling))
rbind(
print_results("Overall", rma_loo[[1]], betas %>% filter(Study != study_nm)),
print_results(study_confidence, rma_loo[[2]], betas %>% filter(Study != study_nm) %>% filter(Confidence == study_confidence)),
print_results(study_confidence2, rma_loo[[3]], betas %>% filter(Study != study_nm) %>% filter(Confidence2 == study_confidence2)),
print_results(study_sampling, rma_loo[[4]], betas %>% filter(Study != study_nm) %>% filter(Sampling_3 == study_sampling))
) %>% kable(format = 'pandoc')
knitr::opts_chunk$set(echo = params$print_code,
warning = FALSE,
tidy = TRUE) #tidy.opts = list(width.cutoff = 60), # if word_document
#rmarkdown::render(output_file = paste0("Meta_Analysis_", pfas, ".pdf"))
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(metafor)
library(meta)
library(knitr)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(formatR)
source("utility_functions.R")
pfas_type = "PFNA"
if (pfas_type == "PFNA") {
betas <- read.csv("betas_pfna.csv")
} else if (pfas_type == "PFHxS") {
betas <- read.csv("betas_pfhxs.csv")
}
attach(betas)
rma_ga <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, mods = ~ GA, data = betas)
rma_ga
rma_ga$ci.lb
knitr::opts_chunk$set(echo = params$print_code,
warning = FALSE,
tidy = TRUE) #tidy.opts = list(width.cutoff = 60), # if word_document
#rmarkdown::render(output_file = paste0("Meta_Analysis_", pfas, ".pdf"))
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(metafor)
library(meta)
library(knitr)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(formatR)
source("utility_functions.R")
pfas_type = "PFNA"
if (pfas_type == "PFNA") {
betas <- read.csv("betas_pfna.csv")
} else if (pfas_type == "PFHxS") {
betas <- read.csv("betas_pfhxs.csv")
}
attach(betas)
rma_overall <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas)
print_results("Overall", rma_overall, betas) %>% kable(format = 'pandoc')
plot_df <- betas %>%
mutate(SampleTiming = factor(fct_recode(Bin, `1st` = "T1", `1st-2nd` = "T1-T2", `2nd-3rd` = "T2-T3", `3rd` = "T3", `Birth` = "B", `Post-Birth` = "PB", `Pre-Conception` = "PC"), levels = c("Pre-Conception", "1st", "1st-2nd", "2nd-3rd", "3rd", "Birth", "Post-Birth")),
Confidence = factor(Confidence, levels = c("High", "Medium", "Low")))
#levels(plot_df$SampleTiming) <- c("Pre-Conception", "1st", "1st-2nd", "2nd-3rd", "3rd", "Birth", "Post-Birth")
# TODO manipulate column positions and rename Timing to `Sample Timing`
forest(rma_overall,
cex = .55,
level = 95,
digits = 1L,
xlim = c(-1100, 500),
alim = c(-200, 200),
order = order(plot_df$Confidence, plot_df$SampleTiming, -plot_df$Sample.Size),
header = "Study",
ilab = cbind(as.character(plot_df$Confidence),
as.character(plot_df$SampleTiming),
plot_df$Sample.Size),
ilab.xpos = c(-650, -500, -350),
slab = plot_df$Study,
xlab = NULL,
mlab = modify_label(rma_overall, "All Studies, RE Model"))
p <- par(cex = .55, font=2)
text(c(-650, -500, -350), length(Study)+2, c("Confidence", "Timing", "N"))
loo <- leave1out(rma_overall, digits = 2) %>%
as.data.frame() %>%
mutate_at(c(1:3, 5:11), ~round(., 2)) %>%
mutate_at(c(4), ~round(., 5)) %>%
add_column(Study, .before = "estimate")
ind <- which(loo$I2 == min(loo$I2))
kable(loo, format = 'pandoc')
regtest_out <- regtest(rma_overall, model = "rma", predictor = "sei")
regtest_p <- round(regtest_out$pval, 4)
funnel(rma_overall, xlab = sprintf("Effect Estimate of ln-%s on Birth-Weight", params$pfas_type)) # label = 3)
# Add an confidence variable with a high and medium confidence combined
betas <- betas %>%
mutate(Confidence2 = factor(ifelse(Confidence == "Low", "Low", "High+Medium"), levels = c("High+Medium", "Low")))
attach(betas)
# Run meta-analysis for each study confidence subgroup using a random effects model
rma_high <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence == "High")
rma_med  <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence == "Medium")
rma_low  <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence == "Low")
rma_hm   <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence2 == "High+Medium")
# Display results
rbind(
print_results("High", rma_high, betas %>% filter(Confidence == "High")),
print_results("Medium", rma_med, betas %>% filter(Confidence == "Medium")),
print_results("Low", rma_low, betas %>% filter(Confidence == "Low")),
print_results("High+Medium", rma_hm, betas %>% filter(Confidence2 == "High+Medium"))) %>% kable(format = "pandoc")
# Prepare data for hypothesis test of any significant differences across strata
confidence_results <- data.frame(strata = c("High", "Medium", "Low"),
estimate = c(coef(rma_high), coef(rma_med), coef(rma_low)),
SE = c(rma_high$se, rma_med$se, rma_low$se),
tau2 = round(c(rma_high$tau2, rma_med$tau2, rma_low$tau2), 3))
# Run fixed effect model with strata as moderator
rma_confidence <- rma(yi = estimate, sei = SE, mods = ~ strata, method = "FE", data = confidence_results)
# Save p-value from hypothesis test differences across moderators (rma() runs an omnibus test for moderator variable, i.e., test for any differences across moderator levels, i.e., strata)
p1 <- round(rma_confidence$QMp, 4)
# Repeat for High+Medium group
confidence2_results <- data.frame(strata = c("High+Medium", "Low"),
estimate = c(coef(rma_hm), coef(rma_low)),
SE = c(rma_hm$se, rma_low$se),
tau2 = round(c(rma_hm$tau2, rma_low$tau2), 3))
rma_confidence2 <- rma(yi = estimate, sei = SE, mods = ~ strata, method = "FE", data = confidence2_results)
p2 <- round(rma_confidence2$QMp, 4)
rma_early <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_3 == "early")
rma_late <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_3 == "late")
rma_post <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_3 == "post")
rbind(
print_results("Early", rma_early, betas %>% filter(Sampling_3 == "early")),
print_results("Late", rma_late, betas %>% filter(Sampling_3 == "late")),
print_results("Post", rma_post, betas %>% filter(Sampling_3 == "post"))) %>% kable(format = "pandoc")
sampling_results <- data.frame(estimate = c(coef(rma_early), coef(rma_late), coef(rma_post)),
SE = c(rma_early$se, rma_late$se, rma_post$se),
strata = c("Early", "Late", "Post"),
tau2 = round(c(rma_early$tau2, rma_late$tau2, rma_post$tau2), 3))
rma_sampling <- rma(estimate, sei = SE, mods = ~ strata, method = "FE", data = sampling_results)
p <- round(rma_sampling$QMp, 4)
rma_ga <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, mods = ~ GA, data = betas)
study_nm <- loo$Study[ind]
study_confidence <- Confidence[Study == study_nm]
study_confidence2 <- Confidence2[Study == study_nm]
study_sampling <- Sampling_3[Study == study_nm]
rma_loo <- list(overall = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm)),
confidence = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm), subset = Confidence == study_confidence),
confidence2 = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm), subset = Confidence2 == study_confidence2),
sampling = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Study != study_nm), subset = Sampling_3 == study_sampling))
rbind(
print_results("Overall", rma_loo[[1]], betas %>% filter(Study != study_nm)),
print_results(study_confidence, rma_loo[[2]], betas %>% filter(Study != study_nm) %>% filter(Confidence == study_confidence)),
print_results(study_confidence2, rma_loo[[3]], betas %>% filter(Study != study_nm) %>% filter(Confidence2 == study_confidence2)),
print_results(study_sampling, rma_loo[[4]], betas %>% filter(Study != study_nm) %>% filter(Sampling_3 == study_sampling))
) %>% kable(format = 'pandoc')
rma_lp <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_2 == "late")
print_results("Late+Post", rma_lp, betas %>% filter(Sampling_2 == "late")) %>% kable(format = 'pandoc')
sampling2_results <- data.frame(estimate = c(coef(rma_early), coef(rma_lp)),
SE = c(rma_early$se, rma_lp$se),
strata = c("Early", "Late+Post"),
tau2 = round(c(rma_early$tau2, rma_lp$tau2), 3))
rma_sampling2 <- rma(estimate, sei = SE, mods = ~ strata, method = "FE", data = sampling2_results)
p <- round(rma_sampling2$QMp, 4)
rma_log <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = BetaUnit %in% c("g/2SD ln(ng/ml)", "g/ln(ng/ml)", "g/log10(ng/ml)", "g/log2(ng/ml)", "g/SD ln(1+ng/ml)", "g/SD ln(ng/ml)"))
print_results("Overall", rma_log, betas %>% filter(BetaUnit %in% c("g/2SD ln(ng/ml)", "g/ln(ng/ml)", "g/log10(ng/ml)", "g/log2(ng/ml)", "g/SD ln(1+ng/ml)", "g/SD ln(ng/ml)"))) %>% kable(format = 'pandoc')
rma_overall_fix <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, method = "FE")
rbind(
print_results("Random", rma_overall, betas),
print_results("Fixed", rma_overall_fix, betas)
) %>% kable(format = 'pandoc')
rma_overall_nat <- rma(yi = BetaNgml, sei = BetaNgmlSE)
rma_high_nat    <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Confidence == "High")
rma_med_nat     <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Confidence == "Medium")
rma_low_nat     <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Confidence == "Low")
rma_hm_nat      <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Confidence2 == "High+Medium")
rma_early_nat   <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Sampling_3 == "early")
rma_late_nat    <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Sampling_3 == "late")
rma_post_nat    <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Sampling_3 == "post")
rma_lp_nat      <- rma(yi = BetaNgml, sei = BetaNgmlSE, data = betas, subset = Sampling_2 == "late")
nat_results <- rbind(
print_results("Overall", rma_overall_nat, betas),
print_results("High", rma_high_nat, betas %>% filter(Confidence == "High")),
print_results("Medium", rma_med_nat, betas %>% filter(Confidence == "Medium")),
print_results("Low", rma_low_nat, betas %>% filter(Confidence == "Low")),
print_results("High+Medium", rma_hm_nat, betas %>% filter(Confidence2 == "High+Medium")),
print_results("Early", rma_early_nat, betas %>% filter(Sampling_3 == "early")),
print_results("Late", rma_late_nat, betas %>% filter(Sampling_3 == "late")),
print_results("Post", rma_post_nat, betas %>% filter(Sampling_3 == "post")),
print_results("Late+Post", rma_lp_nat, betas %>% filter(Sampling_2 == "late"))
)
nat_results %>% kable(format = 'pandoc')
if (pfas_type == "PFNA") {
betas_kwon <- read.csv("betas_pfna_kwon_options.csv")
rma_kwon <- list(log_e = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas_kwon %>% filter(!(Study == "Kwon, 2016" & BetaUnit != "g/ln(ng/ml)"))),
log_2 = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas_kwon %>% filter(!(Study == "Kwon, 2016" & BetaUnit != "g/log2(ng/ml)"))),
log_10 = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas_kwon %>% filter(!(Study == "Kwon, 2016" & BetaUnit != "g/log10(ng/ml)"))),
medium = rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas %>% filter(Confidence == Confidence[Study == "Kwon, 2016"]) %>% filter(!(Study == "Kwon, 2016"))))
}
if (pfas_type == "PFNA") {
print_results("Medium w/o Kwon, 2016", rma_kwon[[4]], betas %>% filter(Confidence == Confidence[Study == "Kwon, 2016"]) %>% filter(!(Study == "Kwon, 2016"))) %>% kable(format = 'pandoc')
} else {
print(sprintf("PFNA is not the chemical of interest; this analysis is not needed for %s.", pfas_type))
}
if (pfas_type == "PFNA") {
rbind(
print_results("log_e", rma_kwon[[1]], betas_kwon %>% filter(!(Study == "Kwon, 2016" & BetaUnit != "g/ln(ng/ml)"))),
print_results("log_2", rma_kwon[[2]], betas_kwon %>% filter(!(Study == "Kwon, 2016" & BetaUnit != "g/log2(ng/ml)"))),
print_results("log_10", rma_kwon[[3]], betas_kwon %>% filter(!(Study == "Kwon, 2016" & BetaUnit != "g/log10(ng/ml)")))
) %>% kable(format = 'pandoc')
} else {
print(sprintf("PFNA is not the chemical of interest; this analysis is not needed for %s.", pfas_type))
}
plot_df <- rma_results %>%
mutate(Type = factor(c("All Studies", "Study Confidence", "Study Confidence", "Study Confidence", "Study Confidence", "Sample Timing", "Sample Timing", "Sample Timing", "Sample Timing"), levels = c("All Studies", "Study Confidence", "Sample Timing")),
Model = factor(Model, levels = c("All", "High", "Medium", "Low", "High+Medium", "Early",
"Mid/Late", "Post", "Mid/Late+Post")))
rma_results <- rbind(
print_results("All", rma_overall, betas),
print_results("High", rma_high, betas %>% filter(Confidence == "High")),
print_results("Medium", rma_med, betas %>% filter(Confidence == "Medium")),
print_results("Low", rma_low, betas %>% filter(Confidence == "Low")),
print_results("High+Medium", rma_hm, betas %>% filter(Confidence2 == "High+Medium")),
print_results("Early", rma_early, betas %>% filter(Sampling_3 == "early")),
print_results("Mid/Late", rma_late, betas %>% filter(Sampling_3 == "late")),
print_results("Post", rma_post, betas %>% filter(Sampling_3 == "post")),
print_results("Mid/Late+Post", rma_lp, betas %>% filter(Sampling_2 == "late"))
)
plot_df <- rma_results %>%
mutate(Type = factor(c("All Studies", "Study Confidence", "Study Confidence", "Study Confidence", "Study Confidence", "Sample Timing", "Sample Timing", "Sample Timing", "Sample Timing"), levels = c("All Studies", "Study Confidence", "Sample Timing")),
Model = factor(Model, levels = c("All", "High", "Medium", "Low", "High+Medium", "Early",
"Mid/Late", "Post", "Mid/Late+Post")))
plot_df <- plot_df %>%
filter(!(Model %in% c("High+Medium", "Mid/Late+Post")))
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
knitr::opts_chunk$set(echo = params$print_code,
warning = FALSE,
tidy = TRUE) #tidy.opts = list(width.cutoff = 60), # if word_document
#rmarkdown::render(output_file = paste0("Meta_Analysis_", pfas, ".pdf"))
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(metafor)
library(meta)
library(knitr)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(formatR)
source("utility_functions.R")
pfas_type = "PFNA"
if (pfas_type == "PFNA") {
betas <- read.csv("betas_pfna.csv")
} else if (pfas_type == "PFHxS") {
betas <- read.csv("betas_pfhxs.csv")
}
attach(betas)
# install.packages("devtools", dependencies = TRUE)
library("ggplot2")
library("scales")
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, shape = Type, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
#ggthemr("fresh") +
theme_minimal() +
scale_color_colorblind() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title.x = element_blank())
library("scales")
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, shape = Type, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
#ggthemr("fresh") +
theme_minimal() +
scale_color_colorblind() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title.x = element_blank())
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, shape = Type, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
theme_minimal() +
scale_colour_colorblind() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title.x = element_blank())
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, shape = Type, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
theme_minimal() +
scale_colour_colorblind()
library("ggthemes")
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, shape = Type, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
theme_minimal() +
scale_colour_colorblind()
knitr::opts_chunk$set(echo = params$print_code,
warning = FALSE,
tidy = TRUE) #tidy.opts = list(width.cutoff = 60), # if word_document
#rmarkdown::render(output_file = paste0("Meta_Analysis_", pfas, ".pdf"))
library(readxl)
library(tidyr)
library(tidyverse)
library(dplyr)
library(metafor)
library(meta)
library(knitr)
library(kableExtra)
library(ggplot2)
library(RColorBrewer)
library(formatR)
library(ggthemes)
source("utility_functions.R")
pfas_type = "PFNA"
if (pfas_type == "PFNA") {
betas <- read.csv("betas_pfna.csv")
} else if (pfas_type == "PFHxS") {
betas <- read.csv("betas_pfhxs.csv")
}
attach(betas)
rma_overall <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas)
print_results("Overall", rma_overall, betas) %>% kable(format = 'pandoc')
# Add an confidence variable with a high and medium confidence combined
betas <- betas %>%
mutate(Confidence2 = factor(ifelse(Confidence == "Low", "Low", "High+Medium"), levels = c("High+Medium", "Low")))
attach(betas)
# Run meta-analysis for each study confidence subgroup using a random effects model
rma_high <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence == "High")
rma_med  <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence == "Medium")
rma_low  <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence == "Low")
rma_hm   <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Confidence2 == "High+Medium")
rma_early <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_3 == "early")
rma_late <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_3 == "late")
rma_post <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_3 == "post")
rma_lp <- rma(yi = BetaLnNgml, sei = BetaLnNgmlSE, data = betas, subset = Sampling_2 == "late")
rma_results <- rbind(
print_results("All", rma_overall, betas),
print_results("High", rma_high, betas %>% filter(Confidence == "High")),
print_results("Medium", rma_med, betas %>% filter(Confidence == "Medium")),
print_results("Low", rma_low, betas %>% filter(Confidence == "Low")),
print_results("High+Medium", rma_hm, betas %>% filter(Confidence2 == "High+Medium")),
print_results("Early", rma_early, betas %>% filter(Sampling_3 == "early")),
print_results("Mid/Late", rma_late, betas %>% filter(Sampling_3 == "late")),
print_results("Post", rma_post, betas %>% filter(Sampling_3 == "post")),
print_results("Mid/Late+Post", rma_lp, betas %>% filter(Sampling_2 == "late"))
)
#rma_results %>% kable(format = 'pandoc')
plot_df <- rma_results %>%
mutate(Type = factor(c("All Studies", "Study Confidence", "Study Confidence", "Study Confidence", "Study Confidence", "Sample Timing", "Sample Timing", "Sample Timing", "Sample Timing"), levels = c("All Studies", "Study Confidence", "Sample Timing")),
Model = factor(Model, levels = c("All", "High", "Medium", "Low", "High+Medium", "Early",
"Mid/Late", "Post", "Mid/Late+Post")))
plot_df <- plot_df %>%
filter(!(Model %in% c("High+Medium", "Mid/Late+Post")))
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, shape = Type, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
theme_minimal() +
scale_colour_colorblind()
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title.x = element_blank())
# ggplot(data = plot_df) +
#   geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL)) +
#   facet_wrap(~Type, scales = "free") +
#     theme(axis.text.x = element_text(angle = 45, vjust = 0.5))
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, shape = Type, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
theme_minimal() +
scale_colour_colorblind() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title.x = element_blank())
ggplot(data = plot_df) +
geom_pointrange(aes(x = Model, y = Estimate, ymin = LCL, ymax = UCL, color = Type)) +
ylab("Pooled Effect Estimate and 95% CI ") +
theme_minimal() +
scale_colour_colorblind() +
theme(legend.title = element_blank(),
axis.text.x = element_text(angle = 45, vjust = 0.5),
axis.title.x = element_blank())
library(xfun)
update.packages(ask = F)
library(tidyr)
remove.packages(rlang)
install.packages("rlang")
install.packages("rlang")
library(tidyr)
library(rlang)
remove.packages("rlang")
install.packages("rlang")
library(rlang)
library(dplyr)
install.packages("rlang")
library(tidyr)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("lifecycle")
install.packages(c("BiasedUrn", "bit", "broom", "bslib", "checkmate", "classInt", "cluster", "commonmark", "conquer", "data.table", "dbplyr", "digest", "dotCall64", "dplyr", "e1071", "Epi", "farver", "fields", "forcats", "foreign", "ggforce", "ggformula", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggstance", "gtools", "haven", "Hmisc", "hms", "htmltools", "httpuv", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "labelled", "lattice", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mgcv", "minqa", "mnormt", "modelr", "mosaicCore", "nlme", "nloptr", "nnet", "openxlsx", "patchwork", "pillar", "pkgload", "plyr", "png", "polyclip", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reprex", "rpart", "rstan", "rstatix", "Rttf2pt1", "rvest", "s2", "sass", "scales", "sf", "shiny", "sjPlot", "sjstats", "sp", "spam", "statmod", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timechange", "tinytex", "TMB", "tweenr", "units", "unmarked", "V8", "vctrs", "VGAM", "vroom", "wk", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("BiasedUrn", "bit", "broom", "bslib", "checkmate", "classInt", "cluster", "commonmark", "conquer", "data.table", "dbplyr", "digest", "dotCall64", "dplyr", "e1071", "Epi", "farver", "fields", "forcats", "foreign", "ggforce", "ggformula", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggstance", "gtools", "haven", "Hmisc", "hms", "htmltools", "httpuv", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "labelled", "lattice", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mgcv", "minqa", "mnormt", "modelr", "mosaicCore", "nlme", "nloptr", "nnet", "openxlsx", "patchwork", "pillar", "pkgload", "plyr", "png", "polyclip", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reprex", "rpart", "rstan", "rstatix", "Rttf2pt1", "rvest", "s2", "sass", "scales", "sf", "shiny", "sjPlot", "sjstats", "sp", "spam", "statmod", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timechange", "tinytex", "TMB", "tweenr", "units", "unmarked", "V8", "vctrs", "VGAM", "vroom", "wk", "xfun", "xts", "yaml", "zip", "zoo"))
install.packages(c("BiasedUrn", "bit", "broom", "bslib", "checkmate", "classInt", "cluster", "commonmark", "conquer", "data.table", "dbplyr", "digest", "dotCall64", "dplyr", "e1071", "Epi", "farver", "fields", "forcats", "foreign", "ggforce", "ggformula", "ggplot2", "ggpubr", "ggrepel", "ggridges", "ggsignif", "ggstance", "gtools", "haven", "Hmisc", "hms", "htmltools", "httpuv", "igraph", "interp", "isoband", "jpeg", "jsonlite", "knitr", "labelled", "lattice", "lme4", "lubridate", "mapproj", "maps", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "mgcv", "minqa", "mnormt", "modelr", "mosaicCore", "nlme", "nloptr", "nnet", "openxlsx", "patchwork", "pillar", "pkgload", "plyr", "png", "polyclip", "proxy", "ps", "purrr", "quantreg", "raster", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reprex", "rpart", "rstan", "rstatix", "Rttf2pt1", "rvest", "s2", "sass", "scales", "sf", "shiny", "sjPlot", "sjstats", "sp", "spam", "statmod", "stringi", "stringr", "survival", "sys", "terra", "testthat", "tibble", "tidyr", "tidyselect", "timechange", "tinytex", "TMB", "tweenr", "units", "unmarked", "V8", "vctrs", "VGAM", "vroom", "wk", "xfun", "xts", "yaml", "zip", "zoo"))
remove.packages("devtools")
install.packages("knitr")
install.packages("xfun")
install.packages("xfun")
remove.packages("xfun")
install.packages("xfun")
install.packages("xfun")
